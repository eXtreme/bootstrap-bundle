{% extends "ExBootstrapBundle:Menu:menu.html.twig" %}

{% block item %}
    {% spaceless %}
        {% if item.displayed %}
            {% set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
            {%- if item.current %}
                {%- set classes = classes|merge([options.currentClass]) %}
            {%- elseif item.currentAncestor %}
                {%- set classes = classes|merge([options.ancestorClass]) %}
            {%- endif %}
            {% if item.hasChildren and options.type is defined and options.type in ['navbar'] %}
                {% set classes = classes|merge(['dropdown']) %}
            {% endif %}
            {% set attributes = item.attributes %}
            {% if classes is not empty %}
                {% set attributes = attributes|merge({ 'class': classes|join(' ') }) %}
            {% endif %}
            {# displaying the item #}
            <li{{ knp_menu.attributes(attributes) }}>
                {% if item.hasChildren and options.type is defined and options.type in ['navbar'] %}
                    {{ block('dropdownElement') }}
                {% elseif item.uri is not empty and (not item.current or options.currentAsLink) %}
                    {{ block('linkElement') }}
                {% else %}
                    {{ block('spanElement') }}
                {% endif %}
                {# render the list of children#}
                {% set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
                {% if item.hasChildren and options.type is defined and options.type in ['navbar'] %}
                    {% set childrenClasses = childrenClasses|merge(['dropdown-menu']) %}
                {% endif %}
                {% set listAttributes = item.childrenAttributes|merge({ 'class': childrenClasses|join(' ') }) %}
                {{ block('list') }}
            </li>
        {% endif %}
    {% endspaceless %}
{% endblock %}